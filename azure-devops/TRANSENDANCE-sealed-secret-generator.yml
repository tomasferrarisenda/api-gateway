name: sealed-secret-generator

trigger: none

parameters:
  - name: TYPE # https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
    displayName: 'Select type of secret'
    type: string
    default: 'Opaque'
    values:
      - 'Opaque'
      # - 'service-account-token'
      - 'dockerconfigjson'
      # - 'basic-auth'
      # - 'ssh-auth'
      # - 'tls'
      # - 'token'
  - name: SECRET_NAME
    displayName: 'Introduce the name that should be given to the Sealed Secret'
    type: string
  - name: NAMESPACE
    displayName: 'Introduce the namespace where the secret should be deployed'
    type: string
  - name: PATH
    displayName: 'Introduce the path to which the Sealed Secret manifest must be saved (e.g. helm/my-app/backend/templates)'
    type: string
    
    # Otions for type Opaque
  - name: SECRET_KEY
    displayName: 'ONLY FOR TYPE "Opaque": Introduce the key of the value that should be encrypted (e.g. DB_PASS)'
    type: string
    default: ' '
  - name: SECRET_VALUE
    displayName: 'ONLY FOR TYPE "Opaque": Introduce the value that should be encrypted'
    type: string
    default: ' '

    # Options for type dockerconfigjson
  - name: USER
    displayName: 'ONLY FOR TYPE "dockerconfigjson": Introduce the user for the registry'
    type: string
    default: ' '
  - name: PASSWORD
    displayName: 'ONLY FOR TYPE "dockerconfigjson": Introduce the password for the user'
    type: string
    default: ' '
  - name: REGISTRY
    displayName: 'ONLY FOR TYPE "dockerconfigjson": Introduce the registry with the port (e.g. my-registry.example:5000)'
    type: string
    default: ' '



variables:
  - group: aws-keys
  - name: AWS_REGION
    value: us-east-2  # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: gonchi # This value was modified by the initial-setup python script
    

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created


steps:
  # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
- checkout: self
  persistCredentials: true

- script: | 
    KUBESEAL_VERSION='0.24.0'
    wget "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz"
    tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz kubeseal
    sudo install -m 755 kubeseal /usr/local/bin/kubeseal
  displayName: 'Install Kubeseal CLI tool'

- script: | 
    mkdir ~/.aws
    echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
    echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
  displayName: 'Configure AWS Profile'

- task: AWSCLI@1
  displayName: 'Update KubeConfig'
  inputs:
    awsCredentials: 'aws'
    regionName: '$(AWS_REGION)' 
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

#####################################################################
## Opaque

- ${{ if eq(parameters.TYPE, 'Opaque') }}:

  - script: | 
      echo "apiVersion: v1
      kind: Secret
      metadata:
        name: ${{ parameters.SECRET_NAME }}
        namespace: ${{ parameters.NAMESPACE }}
      type: Opaque
      data:
        ${{ parameters.SECRET_KEY }}: $(echo -n ${{ parameters.SECRET_VALUE }} | base64)" > secret.yaml
    displayName: 'Create opaque secret manifests to be sealed'

  - script: | 
      kubeseal --format=yaml --controller-namespace secrets --controller-name sealed-secrets < secret.yaml > ${{ parameters.PATH }}/${{ parameters.SECRET_NAME }}-sealed-secret.yaml 
    displayName: 'Encrypt the opaque secret with Kubeseal'

  - script: |
      git pull origin main
      git config --global user.email "AzureDevOps@SealedSecretPipeline.com"
      git config --global user.name "Azure DevOps - Sealed Secret Pipeline"
      git checkout -b main
      git add ${{ parameters.PATH }}/${{ parameters.SECRET_NAME }}-sealed-secret.yaml     
      git commit -m "Sealed secrets created by Azure DevOps"
      git push --set-upstream origin main
    displayName: 'Push changes to GitHub'



#####################################################################
## dockerconfigjson

- ${{ if eq(parameters.TYPE, 'dockerconfigjson') }}:

        # --docker-email=tiger@acme.example \
  - script: | 
      kubectl -n ${{ parameters.NAMESPACE }} create secret docker-registry ${{ parameters.SECRET_NAME }} \
        --docker-username=${{ parameters.USER }} \
        --docker-password=${{ parameters.PASSWORD }} \
        --docker-server=${{ parameters.REGISTRY }} \
        --docker-email=fake@email.com \
        --dry-run=client \
        -o yaml > secret.yaml
    displayName: 'Create dockerconfigjson secret manifests to be sealed'

  # - script: | 
  #     echo "apiVersion: v1
  #     kind: Secret
  #     metadata:
  #       name: ${{ parameters.SECRET_NAME }}
  #       namespace: ${{ parameters.NAMESPACE }}
  #     type: Opaque
  #     data:
  #       ${{ parameters.SECRET_KEY }}: $(echo -n ${{ parameters.SECRET_VALUE }} | base64)" > opaque-secret.yaml
  #   displayName: 'Create secret manifests to be sealed'

  - script: | 
      kubeseal --format=yaml --controller-namespace secrets --controller-name sealed-secrets < secret.yaml > ${{ parameters.PATH }}/${{ parameters.SECRET_NAME }}-sealed-secret.yaml 
    displayName: 'Encrypt the dockerconfigjson secret with Kubeseal'

  - script: |
      git pull origin main
      git config --global user.email "AzureDevOps@SealedSecretPipeline.com"
      git config --global user.name "Azure DevOps - Sealed Secret Pipeline"
      git checkout -b main
      git add ${{ parameters.PATH }}/${{ parameters.SECRET_NAME }}-sealed-secret.yaml     
      git commit -m "Sealed secrets created by Azure DevOps"
      git push --set-upstream origin main
    displayName: 'Push changes to GitHub'




